{"version":3,"sources":["components/Questions/Questions.js","components/Questions/Questions.module.css"],"names":["Questions","history","useHistory","useState","questions","setQuestions","entered","setEntered","isLoading","setIsloading","answers","userId","useSelector","state","user","dispatch","useDispatch","useEffect","loadedQuestions","fetch","then","res","json","data","onChangeHandler","e","type","target","name","value","questionList","map","item","className","classes","questionCard","ques","inputDiv","option1","onChange","option2","option3","option4","when","message","location","btnContainer","btn","onClick","method","headers","body","JSON","stringify","movie","Movie","tvSeries","TvSeries","dish","Dish","country","Country","car","Car","result","typeActions","finishClicked","push","catch","err","console","log","module","exports"],"mappings":"gLAuIeA,UAjIG,WAChB,IAAMC,EAAUC,cAChB,EAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAA8BF,oBAAS,GAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAAkCJ,oBAAS,GAA3C,mBAAOK,EAAP,KAAkBC,EAAlB,KACA,EAAkBN,mBAAS,IAApBO,EAAP,oBACMC,EAASC,aAAY,SAACC,GAAD,OAAWA,EAAMC,KAAKH,UAC3CI,EAAWC,cAIjBC,qBAAU,WACR,IAAIC,EACJT,GAAa,GACbU,MAAM,mCACHC,MAAK,SAACC,GACL,OAAOA,EAAIC,UAEZF,MAAK,SAACG,GACLL,EAAkBK,EAAKA,KACvBlB,EAAaa,GACbT,GAAa,QAEhB,IAEH,IAAMe,EAAkB,SAACC,GACvB,IAAIC,EAAOD,EAAEE,OAAOC,KACpBlB,EAAQgB,GAAQD,EAAEE,OAAOE,OA8BrBC,EAAe1B,EAAU2B,KAAI,SAACC,GAClC,OACE,sBAAKC,UAAWC,IAAQC,aAAxB,UACE,6BAAKH,EAAKI,OACV,qBAAKH,UAAWC,IAAQG,SAAxB,SACE,gCACE,uBACEX,KAAK,QACLE,KAAMI,EAAKN,KACXG,MAAK,kBAAaG,EAAKM,SACvBC,SAAUf,IAEXQ,EAAKM,aAGV,sBAAKL,UAAWC,IAAQG,SAAxB,UACE,uBACEX,KAAK,QACLE,KAAMI,EAAKN,KACXG,MAAK,kBAAaG,EAAKQ,SACvBD,SAAUf,IAEXQ,EAAKQ,WAER,sBAAKP,UAAWC,IAAQG,SAAxB,UACE,uBACEX,KAAK,QACLE,KAAMI,EAAKN,KACXG,MAAK,kBAAaG,EAAKS,SACvBF,SAAUf,IAEXQ,EAAKS,WAER,sBAAKR,UAAWC,IAAQG,SAAxB,UACE,uBACEX,KAAK,QACLE,KAAMI,EAAKN,KACXG,MAAK,kBAAaG,EAAKU,SACvBH,SAAUf,IAEXQ,EAAKU,iBAMd,OACE,eAAC,WAAD,WACE,cAAC,IAAD,CACEC,KAAMrC,EACNsC,QAAS,SAACC,OAIXrC,GAAa,4CACZA,GACA,gCACGsB,EACD,qBAAKG,UAAWC,IAAQY,aAAxB,SACE,uBACEb,UAAWC,IAAQa,IACnBrB,KAAK,SACLG,MAAM,SACNmB,QA1FY,WACtB7B,MAAM,4CAAD,OAA6CR,GAAU,CAC1DsC,OAAQ,MACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CACnBC,MAAO5C,EAAQ6C,MACfC,SAAU9C,EAAQ+C,SAClBC,KAAMhD,EAAQiD,KACdC,QAASlD,EAAQmD,QACjBC,IAAKpD,EAAQqD,QAGd3C,MAAK,SAAC4C,GACL,OAAOA,EAAO1C,UAEfF,MAAK,SAACG,GACLR,EAASkD,IAAYC,iBACrB3D,GAAW,GACXN,EAAQkE,KAAK,eAEdC,OAAM,SAACC,GACNC,QAAQC,IAAIF,mB,mBC1DpBG,EAAOC,QAAU,CAAC,aAAe,gCAAgC,SAAW,4BAA4B,aAAe,gCAAgC,IAAM","file":"static/js/6.ba7aecca.chunk.js","sourcesContent":["import { Fragment, useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport classes from \"./Questions.module.css\";\r\nimport { Prompt, useHistory } from \"react-router\";\r\nimport { typeActions } from \"../../store/showType\";\r\n\r\nconst Questions = () => {\r\n  const history = useHistory();\r\n  const [questions, setQuestions] = useState([]);\r\n  const [entered, setEntered] = useState(true);\r\n  const [isLoading, setIsloading] = useState(false);\r\n  const [answers] = useState({});\r\n  const userId = useSelector((state) => state.user.userId);\r\n  const dispatch = useDispatch();\r\n\r\n  // let questions;\r\n\r\n  useEffect(() => {\r\n    let loadedQuestions;\r\n    setIsloading(true);\r\n    fetch(\"http://localhost:8080/questions\")\r\n      .then((res) => {\r\n        return res.json();\r\n      })\r\n      .then((data) => {\r\n        loadedQuestions = data.data;\r\n        setQuestions(loadedQuestions);\r\n        setIsloading(false);\r\n      });\r\n  }, []);\r\n\r\n  const onChangeHandler = (e) => {\r\n    let type = e.target.name;\r\n    answers[type] = e.target.value;\r\n  };\r\n\r\n  const onSubmitHandler = () => {\r\n    fetch(`http://localhost:8080/entry/survey-entry/${userId}`, {\r\n      method: \"PUT\",\r\n      headers: {\r\n        \"content-type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        movie: answers.Movie,\r\n        tvSeries: answers.TvSeries,\r\n        dish: answers.Dish,\r\n        country: answers.Country,\r\n        car: answers.Car,\r\n      }),\r\n    })\r\n      .then((result) => {\r\n        return result.json();\r\n      })\r\n      .then((data) => {\r\n        dispatch(typeActions.finishClicked());\r\n        setEntered(false);\r\n        history.push(\"/Results\");\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  const questionList = questions.map((item) => {\r\n    return (\r\n      <div className={classes.questionCard}>\r\n        <h3>{item.ques}</h3>\r\n        <div className={classes.inputDiv}>\r\n          <div>\r\n            <input\r\n              type=\"radio\"\r\n              name={item.type}\r\n              value={`option1-${item.option1}`}\r\n              onChange={onChangeHandler}\r\n            />\r\n            {item.option1}\r\n          </div>\r\n        </div>\r\n        <div className={classes.inputDiv}>\r\n          <input\r\n            type=\"radio\"\r\n            name={item.type}\r\n            value={`option2-${item.option2}`}\r\n            onChange={onChangeHandler}\r\n          />\r\n          {item.option2}\r\n        </div>\r\n        <div className={classes.inputDiv}>\r\n          <input\r\n            type=\"radio\"\r\n            name={item.type}\r\n            value={`option3-${item.option3}`}\r\n            onChange={onChangeHandler}\r\n          />\r\n          {item.option3}\r\n        </div>\r\n        <div className={classes.inputDiv}>\r\n          <input\r\n            type=\"radio\"\r\n            name={item.type}\r\n            value={`option4-${item.option4}`}\r\n            onChange={onChangeHandler}\r\n          />\r\n          {item.option4}\r\n        </div>\r\n      </div>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <Fragment>\r\n      <Prompt\r\n        when={entered}\r\n        message={(location) => {\r\n          \"Are you sure you want to leave? All entered data will be lost! \";\r\n        }}\r\n      />\r\n      {isLoading && <p>Loading...</p>}\r\n      {!isLoading && (\r\n        <div>\r\n          {questionList}\r\n          <div className={classes.btnContainer}>\r\n            <input\r\n              className={classes.btn}\r\n              type=\"submit\"\r\n              value=\"Finish\"\r\n              onClick={onSubmitHandler}\r\n            />\r\n          </div>\r\n        </div>\r\n      )}\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Questions;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"questionCard\":\"Questions_questionCard__2aZE3\",\"inputDiv\":\"Questions_inputDiv__23zQR\",\"btnContainer\":\"Questions_btnContainer__2sxfL\",\"btn\":\"Questions_btn__ZfHEM\"};"],"sourceRoot":""}